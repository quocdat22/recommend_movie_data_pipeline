name: Trigger Airflow DAG

on:
  workflow_dispatch:
    inputs:
      dag_id:
        description: 'DAG ID to trigger'
        required: true
        default: 'daily_fetch_popular_movies'
        type: string
      conf:
        description: 'Optional JSON configuration for the DAG run'
        required: false
        default: '{}'
        type: string
      airflow_url:
        description: 'Airflow API URL (include http/https)'
        required: true
        type: string
      total_pages:
        description: 'Number of pages to fetch from TMDB API'
        required: false
        default: '2'
        type: string

jobs:
  trigger-dag:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Trigger DAG
        env:
          AIRFLOW_USERNAME: ${{ secrets.AIRFLOW_USERNAME }}
          AIRFLOW_PASSWORD: ${{ secrets.AIRFLOW_PASSWORD }}
          TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
        run: |
          python - <<EOF
          import requests
          import json
          import os
          import sys
          
          # Get inputs from GitHub Actions
          dag_id = "${{ github.event.inputs.dag_id }}"
          conf_str = "${{ github.event.inputs.conf }}"
          airflow_url = "${{ github.event.inputs.airflow_url }}"
          total_pages = "${{ github.event.inputs.total_pages }}"
          
          # Authentication
          username = os.environ.get("AIRFLOW_USERNAME")
          password = os.environ.get("AIRFLOW_PASSWORD")
          
          if not all([username, password, airflow_url]):
              print("Error: Missing required credentials or Airflow URL")
              sys.exit(1)
              
          # Prepare configuration
          try:
              # Start with the provided conf JSON
              conf = json.loads(conf_str) if conf_str.strip() else {}
              
              # Add environment variables to conf if not already in the provided conf
              if "tmdb_api_key" not in conf:
                  conf["tmdb_api_key"] = os.environ.get("TMDB_API_KEY")
              if "supabase_url" not in conf:
                  conf["supabase_url"] = os.environ.get("SUPABASE_URL")
              if "supabase_key" not in conf:
                  conf["supabase_key"] = os.environ.get("SUPABASE_KEY")
              if "total_pages" not in conf and total_pages:
                  conf["total_pages"] = int(total_pages)
          except json.JSONDecodeError:
              print(f"Error: Invalid JSON configuration: {conf_str}")
              sys.exit(1)
          
          # Construct API endpoint
          api_endpoint = f"{airflow_url.rstrip('/')}/api/v1/dags/{dag_id}/dagRuns"
          
          # Prepare request payload
          payload = {
              "conf": conf
          }
          
          print(f"Triggering DAG: {dag_id}")
          print(f"API Endpoint: {api_endpoint}")
          print(f"Configuration: {json.dumps(conf, indent=2)}")
          
          try:
              # Make API request
              response = requests.post(
                  api_endpoint,
                  json=payload,
                  auth=(username, password),
                  headers={"Content-Type": "application/json"}
              )
              
              # Check response
              if response.status_code == 200 or response.status_code == 201:
                  print("DAG triggered successfully!")
                  print(f"Response: {response.json()}")
              else:
                  print(f"Failed to trigger DAG. Status code: {response.status_code}")
                  print(f"Response: {response.text}")
                  sys.exit(1)
                  
          except Exception as e:
              print(f"Error triggering DAG: {str(e)}")
              sys.exit(1)
          EOF 